<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-30T16:24:30-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">CSS</title><link href="http://localhost:4000/css/2022/07/30/CSS.html" rel="alternate" type="text/html" title="CSS" /><published>2022-07-30T00:00:00-07:00</published><updated>2022-07-30T00:00:00-07:00</updated><id>http://localhost:4000/css/2022/07/30/%20CSS</id><content type="html" xml:base="http://localhost:4000/css/2022/07/30/CSS.html"><![CDATA[<h1 id="css">CSS</h1>

<ul>
  <li>CSS stands for Cascading Style Sheets</li>
  <li>It’s used to style HTML pages</li>
  <li>Whenever the browser displays an HTML page, it first loads and parses the HTML to create the Document Object Model (DOM) tree, which represents the page
    <ul>
      <li>Then the browser will load and parse the CSS to style the appropriate nodes of the DOM tree (i.e. the elements in our HTML)</li>
      <li>Once this is completed, the browser will display the content of the page to the user</li>
    </ul>
  </li>
  <li>Rulesets (or rules) are a collection of selectors and properties that specify which element(s) to style and the styling to apply</li>
  <li>Declarations follow the curly braces in a ruleset and are the property/value pairs</li>
  <li>Selectors indicate which element(s) to apply the styling to</li>
  <li>Properties determine the kind of styling that we’re applying</li>
  <li>Values is given to the property to specify the applied style</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>
    <span class="nl">align-content</span><span class="p">:</span> <span class="nb">center</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="css-selectors">CSS Selectors</h2>

<ul>
  <li>When writing a selector, we can select by tag, class, id, and/or by other attributes</li>
  <li>For tag selectors, we’ll just use the name of the corresponding tag to select all elements with the specified tag, e.g.</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>For class selectors, we’ll prefix the class name with a period to select all elements with the provided class</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.input</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>For id selectors, we’ll prefix the id name with a hashtag to select the element with the specified id</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">#checkbox</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>To select by additional attributes, we can specify the attribute name-value pair in square brackets
    <ul>
      <li>e.g. to select all paragraph elements that are centered,</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span><span class="o">[</span><span class="nt">align</span><span class="o">=</span><span class="s1">"center"</span><span class="o">]</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>We can combine multiple selectors by specifying them without a space in between
    <ul>
      <li>e.g. to select only the paragraph elements with the <code class="language-plaintext highlighter-rouge">description</code> class</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span><span class="nc">.description</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>We can specify requirements for ancestor elements by including a space between selectors
    <ul>
      <li>e.g. to select only the paragraph elements within a <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> element</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="nt">p</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>To select multiple different elements with different attributes/classes, we can separate selectors by commas
    <ul>
      <li>e.g., to select all paragraph elements and all elements that have the <code class="language-plaintext highlighter-rouge">description</code> class</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span><span class="o">,</span><span class="nc">.description</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="css-locations">CSS Locations</h2>

<ul>
  <li>We can include CSS inline, internally in our HTML page, or externally in a separate stylesheet</li>
  <li>We specify inline CSS by setting the <code class="language-plaintext highlighter-rouge">style</code> attribute of our HTML page
    <ul>
      <li>When using inline CSS, we don’t include any selectors or curly braces</li>
      <li>Rather we just include property-value pairs</li>
    </ul>
  </li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">style</span><span class="o">=</span><span class="s1">"background-color:blue"</span><span class="o">&gt;</span><span class="nt">This</span> <span class="nt">div</span> <span class="nt">tag</span> <span class="nt">will</span> <span class="nt">have</span> <span class="nt">a</span> <span class="nt">blue</span> <span class="nt">background</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>We specify internal CSS by including a <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> element within our page’s <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>
    <ul>
      <li>this will have the same appearance as external CSS (i.e. we’ll have rulesets with selectors followed by curly braces containing declarations)</li>
    </ul>
  </li>
  <li>We specify external CSS by creating a <code class="language-plaintext highlighter-rouge">.css</code> file and providing a relative path to that file in the <code class="language-plaintext highlighter-rouge">&lt;link&gt;</code> element of our page’s <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>
    <ul>
      <li>Within the CSS file, we’ll have rulesets with selectors followed by curly braces containing declarations</li>
    </ul>
  </li>
</ul>

<h2 id="css-specificity">CSS Specificity</h2>

<ul>
  <li>Oftentimes, a single element in our HTML will be matched by multiple different rulesets</li>
  <li>so we need a way to determine which ruleset will take precedence and have its declarations applied to the element</li>
  <li>any element that contains inline styling will have those declarations applied to it - inline styling takes precedence over internal and external styling in all cases</li>
  <li>to determine precedence between internal and external rulesets, we calculate the specifity as follows through a three-column calculation
    <ul>
      <li>the first column is the number of <code class="language-plaintext highlighter-rouge">id</code> values in the selector that the element matches</li>
      <li>the second column is the number of classes and attribute selectors in the selector that the element matches</li>
      <li>the third column is the number of tag selectors that the element matches</li>
    </ul>
  </li>
  <li>once the specificity score is calculated, it’s evaluated from left to right
    <ul>
      <li>so the ruleset with the highest value for the first column will take precedence</li>
      <li>if there’s a tie in the first column, the ruleset with the highest value in the second column will take precedence</li>
      <li>if there’s a tie in the first two columns, the ruleset with the highest value for the third column will take precedence</li>
      <li>if multiple rulesets have the same value for all three columns, the ruleset that’s declared last will take precedence</li>
    </ul>
  </li>
</ul>

<h2 id="the-box-model">The Box Model</h2>

<ul>
  <li>The box model is a container that wraps around each HTML element in our page</li>
  <li>It consists of four layers: (from outermost to innermost) margin, border, padding, and the content</li>
  <li>The margin is a transparent space outside of an element’s border</li>
  <li>The border is an opaque perimeter around the element</li>
  <li>The padding is spacing between the border and the content</li>
  <li>The content is the text/images of our element</li>
</ul>

<p align="center"><img src="./box_model.jpg" /></p>

<ul>
  <li>We can apply styling at each layer of the box model</li>
</ul>

<h3 id="styling-margins">Styling Margins</h3>

<ul>
  <li>We can style an element’s margins through the <code class="language-plaintext highlighter-rouge">margin</code>, <code class="language-plaintext highlighter-rouge">margin-bottom</code>, <code class="language-plaintext highlighter-rouge">margin-left</code>, <code class="language-plaintext highlighter-rouge">margin-top</code>, and/or <code class="language-plaintext highlighter-rouge">margin-right</code> properties</li>
  <li><code class="language-plaintext highlighter-rouge">margin</code> is a shorthand property (a shorthand property implicitly determines the values of more specific properties) and lets us specify the width of the margin through either relative or absolute sizes</li>
  <li>If we use a relative size, the margin will adapt based on the size of the window being used to view it</li>
  <li>We specify relative sizes through percentages or the <code class="language-plaintext highlighter-rouge">em</code> unit (which relates to an element’s font)</li>
  <li>If we use an absolute size, we have a variety of units we can use, including pixels (px), cm, and in</li>
  <li>Because <code class="language-plaintext highlighter-rouge">margin</code> is a shorthand property, we can pass a different number of values to it
    <ul>
      <li>If we pass one value to <code class="language-plaintext highlighter-rouge">margin</code>, it’ll be applied to all four sides of the element</li>
      <li>If we pass two values to the <code class="language-plaintext highlighter-rouge">margin</code>, the first will be applied to the top and bottom margin and the second will be applied to the left and right margins</li>
      <li>If we pass three values to the <code class="language-plaintext highlighter-rouge">margin</code>, they’ll be applied to (in order) the top, left/right, and bottom margins</li>
      <li>If we pass four values to the <code class="language-plaintext highlighter-rouge">margin</code>, they’ll be applied to (in order) the top, right, bottom, and left margins</li>
    </ul>
  </li>
  <li>We can specify the margin for a particular side of the element through the <code class="language-plaintext highlighter-rouge">margin-left</code>, <code class="language-plaintext highlighter-rouge">margin-right</code>, <code class="language-plaintext highlighter-rouge">margin-top</code>, or <code class="language-plaintext highlighter-rouge">margin-bottom</code> properties, which each take a single value that applies to their respective side</li>
</ul>

<h3 id="styling-borders">Styling Borders</h3>

<ul>
  <li>Border properties include <code class="language-plaintext highlighter-rouge">border</code>, <code class="language-plaintext highlighter-rouge">border-bottom</code>, <code class="language-plaintext highlighter-rouge">border-left</code>, <code class="language-plaintext highlighter-rouge">border-top</code>, <code class="language-plaintext highlighter-rouge">border-right</code>, and <code class="language-plaintext highlighter-rouge">border-color</code></li>
  <li>The first of these are shorthand properties</li>
  <li>The <code class="language-plaintext highlighter-rouge">border</code> property takes values for (in order) the border width, border style, and the color of the border</li>
  <li>border width
    <ul>
      <li>can be <code class="language-plaintext highlighter-rouge">thin</code>, <code class="language-plaintext highlighter-rouge">medium</code>, <code class="language-plaintext highlighter-rouge">thick</code>, a relative size, or an absolute size</li>
      <li>it can take multiple values in an analogous way to the <code class="language-plaintext highlighter-rouge">margin</code> property</li>
    </ul>
  </li>
  <li>border style
    <ul>
      <li>required</li>
      <li>determines the line style of the border</li>
      <li>can take values including <code class="language-plaintext highlighter-rouge">dotted</code>, <code class="language-plaintext highlighter-rouge">solid</code>, and <code class="language-plaintext highlighter-rouge">dashed</code></li>
    </ul>
  </li>
  <li>border color
    <ul>
      <li>can be color names (e.g. <code class="language-plaintext highlighter-rouge">black</code> or <code class="language-plaintext highlighter-rouge">blue</code>), hexadecimal values prefixed with a hashtag, or the <code class="language-plaintext highlighter-rouge">rgb()</code> function</li>
      <li>the <code class="language-plaintext highlighter-rouge">rgb()</code> function takes comma separated values between 0 and 255 for red, green, and blue</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">border-bottom</code>, <code class="language-plaintext highlighter-rouge">border-top</code>, <code class="language-plaintext highlighter-rouge">border-right</code>, and <code class="language-plaintext highlighter-rouge">border-left</code> hold the same values as <code class="language-plaintext highlighter-rouge">border</code> property (width, style, and color) but only apply to their respective side of the element</li>
  <li>we can specify the border’s color separately through the <code class="language-plaintext highlighter-rouge">border-color</code> property</li>
</ul>

<h3 id="styling-padding">Styling Padding</h3>

<ul>
  <li>we specify padding through one or more of the <code class="language-plaintext highlighter-rouge">padding</code>, <code class="language-plaintext highlighter-rouge">padding-bottom</code>, <code class="language-plaintext highlighter-rouge">padding-left</code>, <code class="language-plaintext highlighter-rouge">padding-right</code>, and/or <code class="language-plaintext highlighter-rouge">padding-top</code> properties</li>
  <li>each of these properties functions analogously to the corresponding margin property and takes a width value</li>
</ul>

<h2 id="responsive-web-design">Responsive Web Design</h2>

<ul>
  <li>to make a webpage responsive, we implement styling so that the elements on the page adapt to the size of the screen being used to view them</li>
  <li>we can implement responsive web design by
    <ul>
      <li>setting the <code class="language-plaintext highlighter-rouge">viewport</code> in our <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element
        <ul>
          <li>the viewport is a feature from HTML5 that allows us to tell the browser how to control the size and scale of the document based on the device being used to view it</li>
        </ul>
      </li>
      <li>using <code class="language-plaintext highlighter-rouge">&lt;picture&gt;</code> tags for images
        <ul>
          <li>within <code class="language-plaintext highlighter-rouge">&lt;picture&gt;</code> tags, we’ll include <code class="language-plaintext highlighter-rouge">&lt;source&gt;</code> tags</li>
          <li><code class="language-plaintext highlighter-rouge">&lt;source&gt;</code> elements have a <code class="language-plaintext highlighter-rouge">media</code> attribute that we can use to set the minimum width allowed for a particular picture to display</li>
          <li>if the size of the screen is smaller than the specified width, the image will not render</li>
        </ul>
      </li>
      <li>relative styling, such as using percentages/em values for widths rather than absolute values and also using responsive layout systems</li>
    </ul>
  </li>
</ul>

<h2 id="flexbox">Flexbox</h2>

<ul>
  <li>Flexbox is a responsive container for holding our HTML elements</li>
  <li>to use flexbox, we’ll set the <code class="language-plaintext highlighter-rouge">display</code> property for an element to <code class="language-plaintext highlighter-rouge">flex</code></li>
  <li>then we can use various flexbox properties within, including
    <ul>
      <li><code class="language-plaintext highlighter-rouge">flex-direction</code>, which determines how our elements are rendered
        <ul>
          <li>can take values including <code class="language-plaintext highlighter-rouge">row</code> (which renders the elements in a row), <code class="language-plaintext highlighter-rouge">row-reverse</code> (which renders the elements in a row in the reverse of the order that they’re defined), <code class="language-plaintext highlighter-rouge">column</code> (which displays the elements in a column), and <code class="language-plaintext highlighter-rouge">column-reverse</code> (which displays the elements in a columnh in the reverse of the order in which they’re defined)</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">flex-wrap</code>, which takes a value of <code class="language-plaintext highlighter-rouge">wrap</code> and will let our elements wrap to the next line when the end of the window is reached</li>
      <li><code class="language-plaintext highlighter-rouge">flex-flow</code>, which is a shorthand property that takes values for both the wrap and direction (in that order) of the flexbox</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="CSS" /><summary type="html"><![CDATA[CSS]]></summary></entry><entry><title type="html">HTML</title><link href="http://localhost:4000/html/2022/07/30/HTML.html" rel="alternate" type="text/html" title="HTML" /><published>2022-07-30T00:00:00-07:00</published><updated>2022-07-30T00:00:00-07:00</updated><id>http://localhost:4000/html/2022/07/30/HTML</id><content type="html" xml:base="http://localhost:4000/html/2022/07/30/HTML.html"><![CDATA[<h1 id="html">HTML</h1>

<ul>
  <li>HyperText Markup Language</li>
  <li>markup language for creating webpages and applications</li>
  <li>browsers parse HTML to render the content of a webpage when we visit it</li>
  <li>Elements in HTML define the structure of the document and are indicated by tags
    <ul>
      <li>the element consists of everything between the start of the opening tag and the end of the closing tag (i.e. any attributes, nested tags and elements, etc.)</li>
      <li>the tags for elements are surrounded by angle brackets</li>
      <li>the closing tag for an element starts with an angle bracket followed by a forward slash</li>
    </ul>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div&gt;&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>Attributes are defined within the opening tag of an element
    <ul>
      <li>are key/value pairs that define the characteristics of the element by giving metadata that’s important for the browser to know (e.g. element-specific styling, classes/ids, the URL for a hyperlink, etc.)</li>
      <li>the key is the name of the attribute being set and the value is enclosed in quotations</li>
      <li>some HTML elements have their own unique attributes, but there are also global attributes that all elements can use such as <code class="language-plaintext highlighter-rouge">class</code> and <code class="language-plaintext highlighter-rouge">id</code></li>
    </ul>
  </li>
</ul>

<h2 id="the-class-attribute">The class Attribute</h2>

<ul>
  <li>classes are used to group elements that should have a common appearance</li>
  <li>we assign the same class to multiple elements if they should have the same styling</li>
  <li>elements can have multiple classes, they’ll just be separated by spaces in the value of the attribute</li>
</ul>

<h2 id="the-id-attribute">The id Attribute</h2>

<ul>
  <li>we use the <code class="language-plaintext highlighter-rouge">id</code> when there is styling that should be unique to a given element or if we want to provide functionality unique for that element</li>
  <li>when assigning an <code class="language-plaintext highlighter-rouge">id</code> value, we should use a value that’s unique across our entire HTML document (i.e. we shouldn’t repeat ids)</li>
</ul>

<h2 id="starting-html-documents">Starting HTML Documents</h2>

<ul>
  <li>each HTML document begins with a special tag known as the DOCTYPE declaration, which lets browsers know which top of document they’re working with and the version of the markup language being used</li>
  <li>for HTML5, the DOCTYPE declaration is:</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
</code></pre></div></div>

<ul>
  <li>following the DOCTYPE declaration, we have the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> tag that acts as the root of our document
    <ul>
      <li>everything within our HTML page will be nested inside of this element</li>
    </ul>
  </li>
  <li>within the <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> element, we have the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> elements</li>
</ul>

<h3 id="the-head-element">The <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> element</h3>

<ul>
  <li>contains metadata associated with the page, including information for the browser such as the title, character encoding, and references to external stylesheets</li>
  <li>elements within <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">&lt;title&gt;</code>, which holds a title for our page and is required for all valid HTML pages</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code>, which can hold the name, author, description, and keywords for our page</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;link&gt;</code>, which holds the relative path to any external CSS documents we’re using for styling</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>, which contains either internal JavaScript or a relative path to external JavaScript to provide client-side functionality for our page</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;base&gt;</code>, which allows us to set a base url for all hyperlinks in our document</li>
    </ul>
  </li>
</ul>

<h3 id="the-body-element">The <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> Element</h3>

<ul>
  <li>we include the visible elements of our HTML page in the <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> element of our page</li>
  <li>visible elements can be either inline or block-level elements</li>
  <li>block elements have implicit newlines before and after, so they take the entire width of the page
    <ul>
      <li>e.g., <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code></li>
    </ul>
  </li>
  <li>inline elements render within the line and only take the space they need
    <ul>
      <li>e.g., <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code></li>
    </ul>
  </li>
</ul>

<h3 id="common-html-elements">Common HTML Elements</h3>

<p><a href="https://www.w3schools.com/tags/default.asp">HTML Elements (w3Schools)</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>
    <ul>
      <li>renders a clickable hyperlink in our page</li>
      <li><code class="language-plaintext highlighter-rouge">href</code> attribute holds the URL that the user is redirected to when they click the link</li>
      <li><code class="language-plaintext highlighter-rouge">target</code> attribute specifies how to open the link (e.g. in a new tab, current tab, etc.)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>
    <ul>
      <li>renders an image within our page</li>
      <li><code class="language-plaintext highlighter-rouge">src</code> attribute that holds the relative path or URL to the image we want to display</li>
      <li><code class="language-plaintext highlighter-rouge">alt</code> attribute holds alternative text that will display in the case that the image can’t be shown (e.g. if it’s been removed from the URL) and to assist screen readers for users with sight problems</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;table&gt;</code>
    <ul>
      <li>renders a table in our page</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;thead&gt;</code> element that defines the table header</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;tbody&gt;</code> element that defines the table body</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;tr&gt;</code> elements that define table rows</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;th&gt;</code> elements to define a cell in the header row</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;td&gt;</code> elements to define a cell in a body row</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ol&gt;</code>
    <ul>
      <li>renders an ordered list in our page</li>
      <li>numbered by default, but we can change the delimiter by setting the <code class="language-plaintext highlighter-rouge">type</code> attribute</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code>
    <ul>
      <li>renders an unordered list in our page</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;li&gt;</code>
    <ul>
      <li>renders list items within an ordered or unordered list</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>
    <ul>
      <li>block-level element that defines a division of our page</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>
    <ul>
      <li>block-level element that defines a paragraph</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>
    <ul>
      <li>inline element used for grouping text or elements</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;b&gt;</code>
    <ul>
      <li>bolds text</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;i&gt;</code>
    <ul>
      <li>italicizes text</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;h2&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;h3&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;h4&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;h5&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;h6&gt;</code>
    <ul>
      <li>header tags that are block-level elements</li>
      <li><code class="language-plaintext highlighter-rouge">h1</code> is the largest header to <code class="language-plaintext highlighter-rouge">h6</code> as the smallest header</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;br/&gt;</code>
    <ul>
      <li>self-closing tag for line breaks</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;!-- --&gt;</code>
    <ul>
      <li>holds comments</li>
    </ul>
  </li>
</ul>

<h2 id="semantic-markup">Semantic Markup</h2>

<ul>
  <li>some HTML tags have semantic meaning, which means that the element gives some information about the type of content it contains</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> is a semantic element, the browser interprets this element as the most important header on our webpage</li>
  <li>semantic markup is used for search engine optimization because we can indicate the most important parts of our page and for screen readers because semantic elements better indicate the content that they contain</li>
  <li>other semantic elements include <code class="language-plaintext highlighter-rouge">&lt;header&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;nav&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;section&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;article&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;aside&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;footer&gt;</code></li>
</ul>

<h2 id="forms">Forms</h2>

<ul>
  <li>forms are sections of our HTML documents that contain controls that solicit information a user that we normally submit to the server</li>
  <li>we use the <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> element to create forms in our page</li>
  <li>within the form element, we’ll use <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> elements for each piece of information we want to collect from the user
    <ul>
      <li>to indicate the kind of information we’re collecting, we’ll use the <code class="language-plaintext highlighter-rouge">type</code> attribute of the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element</li>
      <li><code class="language-plaintext highlighter-rouge">type</code> can be one of many values, including text, password, radio, checkbox, file, submit, or reset
        <ul>
          <li>text gives a single-line textbox input</li>
          <li>password gives a textbox input that masks the entered characters using asterisks or periods so that the user can’t see the raw value that was entered</li>
          <li>radio renders a set of radio buttons that a user can select one of</li>
          <li>checkbox renders a checkbox that the user can select</li>
          <li>file givews a fileselect box that users can upload a file to, to have it sent to the server</li>
        </ul>
      </li>
      <li>whenever we include an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element in our form, we’ll have a <code class="language-plaintext highlighter-rouge">&lt;label&gt;</code> element before it to give a label to the input
        <ul>
          <li>the <code class="language-plaintext highlighter-rouge">for</code> attribute of the <code class="language-plaintext highlighter-rouge">&lt;label&gt;</code> element indicates the <code class="language-plaintext highlighter-rouge">id</code> of the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element that it’s associated with</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>we can also include <code class="language-plaintext highlighter-rouge">&lt;textarea&gt;</code> element in our form, which will render multiline textbox that can contain newlines
    <ul>
      <li>we can specify the size of the textarea through the <code class="language-plaintext highlighter-rouge">rows</code> and <code class="language-plaintext highlighter-rouge">cols</code> attributes, which determine the number of rows and the number of columns for the textarea, respectively</li>
    </ul>
  </li>
  <li>we can create dropdowns through the <code class="language-plaintext highlighter-rouge">&lt;select&gt;</code> element
    <ul>
      <li>inside the select element, we’ll define the different options with <code class="language-plaintext highlighter-rouge">&lt;option&gt;</code> elements, specifying the <code class="language-plaintext highlighter-rouge">value</code> attribute for each option</li>
    </ul>
  </li>
  <li>to add reset and submit buttons to our form, we’ll create input elements with <code class="language-plaintext highlighter-rouge">reset</code> and <code class="language-plaintext highlighter-rouge">submit</code> for the type, respectively</li>
  <li>the <code class="language-plaintext highlighter-rouge">submit</code> button allows us to send form data to the server</li>
  <li>the <code class="language-plaintext highlighter-rouge">reset</code> button will clear the form data</li>
  <li>to specify where the form data will be sent once the user clicks the <code class="language-plaintext highlighter-rouge">submit</code> button, we’ll set the <code class="language-plaintext highlighter-rouge">action</code> attribute on the <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> element
    <ul>
      <li>typically, the value that we’ll pass to this attribute will be the URL of the server that will receive the form sumission</li>
    </ul>
  </li>
  <li>we can also set the <code class="language-plaintext highlighter-rouge">target</code> attribute on the form element to specify how the result of the submission will be displayed to the user
    <ul>
      <li>this attribute will specify if the result of the submission opens in a new tab, in the same tab, etc.</li>
    </ul>
  </li>
  <li>we specify the <code class="language-plaintext highlighter-rouge">name</code> for the different input elements within our form
    <ul>
      <li>oftentimes this will match the <code class="language-plaintext highlighter-rouge">for</code> attribute of the corresponding <code class="language-plaintext highlighter-rouge">&lt;label&gt;</code></li>
      <li>but it does not have to</li>
      <li>we’ll use the name if we’re retrieving our elements, e.g. in JavaScript</li>
    </ul>
  </li>
  <li>the <code class="language-plaintext highlighter-rouge">value</code> attribute can be given to an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element to specify a default value for the input field
    <ul>
      <li>if we’re working with a <code class="language-plaintext highlighter-rouge">submit</code> or <code class="language-plaintext highlighter-rouge">reset</code> <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element, <code class="language-plaintext highlighter-rouge">value</code> will hold the label of the button</li>
    </ul>
  </li>
  <li>the <code class="language-plaintext highlighter-rouge">placeholder</code> attribute can be given to an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element to give information about what we’re expecting in the input
    <ul>
      <li>we can use placeholders for text, password, and other input types</li>
    </ul>
  </li>
  <li>the <code class="language-plaintext highlighter-rouge">required</code> attribute which requires a user to provide a value for an input field before submitting the form
    <ul>
      <li>the <code class="language-plaintext highlighter-rouge">required</code> attribute is a Boolean attribute (meaning that it can have a true or false value)</li>
      <li>for Boolean HTML attributes, we can explicitly specify a true or false value</li>
      <li>or we can simply include the attribute without a value (meaning true) or exclude the attribute (meaning false)</li>
    </ul>
  </li>
  <li>the <code class="language-plaintext highlighter-rouge">min</code> and <code class="language-plaintext highlighter-rouge">max</code> attributes which hold a minimum and maximum value, respectively for the input
    <ul>
      <li>these attributes can be used for number, range, date, datetime-local, month, time, and week inputs</li>
    </ul>
  </li>
</ul>

<h2 id="html-form-validation">HTML Form Validation</h2>

<ul>
  <li>whenever a user submits a form, the data will be sent to the location specified by the <code class="language-plaintext highlighter-rouge">action</code> attribute on the <code class="language-plaintext highlighter-rouge">&lt;form&gt;</code> element</li>
  <li>however, the form will be validated before it’s sent</li>
  <li>this client-side validation comes in two forms - validation based on HTML5 rules and JavaScript validation using JavaScript that we’ve written</li>
  <li>validation based on HTML5 rules
    <ul>
      <li>any <code class="language-plaintext highlighter-rouge">required</code> <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> elements must have a value</li>
      <li>any constraints imposed by <code class="language-plaintext highlighter-rouge">minlength</code> and <code class="language-plaintext highlighter-rouge">maxlength</code> attributes (which determine the minimum length and maximum length of an input value, respectively) must be observed</li>
      <li>any constraints imposed by <code class="language-plaintext highlighter-rouge">min</code> and <code class="language-plaintext highlighter-rouge">max</code> attributes must be observed</li>
      <li>the value provided must match the <code class="language-plaintext highlighter-rouge">type</code> that we’ve specified for all <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> elements</li>
      <li>if we’ve defined a regular expression that the input value must match through the <code class="language-plaintext highlighter-rouge">pattern</code> attribute on an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> element, that must be matched as well</li>
    </ul>
  </li>
  <li>if the form input provided by the user satisfies the validation, it will be submitted</li>
  <li>if the form input is invalid, it won’t be submitted until the user corrects the input and submits again</li>
</ul>]]></content><author><name></name></author><category term="html" /><summary type="html"><![CDATA[HTML]]></summary></entry><entry><title type="html">Asynchronous JavaScript</title><link href="http://localhost:4000/javascript/2022/07/30/Asynchronous-JavaScript.html" rel="alternate" type="text/html" title="Asynchronous JavaScript" /><published>2022-07-30T00:00:00-07:00</published><updated>2022-07-30T00:00:00-07:00</updated><id>http://localhost:4000/javascript/2022/07/30/Asynchronous-JavaScript</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/30/Asynchronous-JavaScript.html"><![CDATA[<h1 id="asynchronous-javascript">Asynchronous JavaScript</h1>

<ul>
  <li>normally our code runs synchronously - one line must finish executing before the JavaScript engine will execute the following line
    <ul>
      <li>so if a line of code calls a function, that function must finish execution and return before the following line will start execution, even if the function doesn’t have a returned value</li>
    </ul>
  </li>
  <li>if we’re executing a very resource intensive method or if we’re making a callout to a webservice, synchronous exeuction isn’t ideal because we don’t want our code to be in a holding pattern until these operations return
    <ul>
      <li>so in these cases, we’d rather execute asynchronously</li>
    </ul>
  </li>
  <li>in asyncrhonous execution, we invoke a method or process but continue execution in the code that called it</li>
</ul>

<h2 id="microtask-queue">Microtask Queue</h2>

<ul>
  <li>an internal queue used by JavaScript engines (the engines running our code in the browser or whatever environment we’re executing in)</li>
  <li>the queue is FIFO (first in, first out) - so a job that’s queued will need to have all jobs queued before it finish before the job will be taken off the queue and executed</li>
  <li>the engine only takes a task from the microtask queue when the previous task has finished execution</li>
</ul>

<h2 id="event-loop">Event Loop</h2>

<ul>
  <li>the event loop is where tasks that are pulled from the microtask queue are executed</li>
  <li>immediately after a task has finished execution, the JavaScript engine will grab the next task from the microtask queue</li>
  <li>only when the microtask queue is empty, will the engine turn to other tasks such as rerendering the page for the user with any updates</li>
</ul>

<h2 id="callback-functions">Callback Functions</h2>

<ul>
  <li>a callback function is a function that’s passed as an argument to another function and is executed when the first function returns</li>
  <li>callback functions are used with asyncrhonous execution in JavaScript to tell the engine what to do when the asynchronous action has finished and returned</li>
</ul>

<h2 id="settimeout">setTimeout()</h2>

<ul>
  <li>takes two parameters
    <ul>
      <li>a callback function to execute after the specified time has elapsed</li>
      <li>the time that must elapse before the callback function is executed (in milliseconds)</li>
    </ul>
  </li>
  <li>will invoke the callback function after the specified amount of time has elapsed
    <ul>
      <li>it won’t invoke the callback function immediately after the specified amount of time has elapsed, rather the callback function is added to the microtask queue whenever the specified time has elapsed</li>
    </ul>
  </li>
</ul>

<h2 id="setinterval">setInterval()</h2>

<ul>
  <li>takes two parameters
    <ul>
      <li>a callback function to execute at regular intervals after the specified time has elapsed</li>
      <li>the time that must elapse before the callback function is executed again (in milliseconds)</li>
    </ul>
  </li>
  <li>will invoke the callback function passed as the first argument every interval period
    <ul>
      <li>it won’t invoke callback function immediately after interval elapses, rather the callback function is added to the microtask queue whenever the interval has elapsed</li>
    </ul>
  </li>
</ul>

<h2 id="promises">Promises</h2>

<ul>
  <li>a promise is a proxy for a value that isn’t currently available, but will eventually become available</li>
  <li>when a promise is called, it starts in a <code class="language-plaintext highlighter-rouge">pending</code> state and the calling function continues execution</li>
  <li>the promise will eventually move to either a <code class="language-plaintext highlighter-rouge">resolved</code> state (if it executed successfully) or a <code class="language-plaintext highlighter-rouge">rejected</code> state (if there was an error in execution)</li>
  <li>we can create our own promises by calling the promise constructor
    <ul>
      <li>e.g.</li>
    </ul>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">myPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="p">});</span>
</code></pre></div>    </div>

    <ul>
      <li>the promise constructor takes a function as its parameter
        <ul>
          <li>this function is referred to as the executor function - the operation that the promise is serving as a proxy for</li>
          <li>the executor function takes two parameters - <code class="language-plaintext highlighter-rouge">resolve</code> and <code class="language-plaintext highlighter-rouge">reject</code> callbacks</li>
        </ul>
      </li>
      <li>if the promise moves to a <code class="language-plaintext highlighter-rouge">resolved</code> state, the callback method that we pass to the <code class="language-plaintext highlighter-rouge">resolve</code> parameter is invoked</li>
      <li>if the promise moves to a <code class="language-plaintext highlighter-rouge">rejected</code> state, the callback that we pass to the <code class="language-plaintext highlighter-rouge">reject</code> parameter is invoked</li>
      <li>when we instantiate a new promise, the executor function runs automatically</li>
      <li>the promise constructor returns an object with <code class="language-plaintext highlighter-rouge">state</code> and <code class="language-plaintext highlighter-rouge">result</code> properties
        <ul>
          <li><code class="language-plaintext highlighter-rouge">state</code> is <code class="language-plaintext highlighter-rouge">pending</code> initially and becomes <code class="language-plaintext highlighter-rouge">fulfilled</code> if the promise is resolved and <code class="language-plaintext highlighter-rouge">rejected</code> if the promise is rejeted</li>
          <li><code class="language-plaintext highlighter-rouge">result</code> is <code class="language-plaintext highlighter-rouge">undefined</code> and becomes the return from the promise when the <code class="language-plaintext highlighter-rouge">resolve</code> is invoked or the error that occurred when the <code class="language-plaintext highlighter-rouge">reject</code> callback is invoked</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="consuming-promises">Consuming Promises</h3>

<ul>
  <li>consuming functions for promises can be registered using the <code class="language-plaintext highlighter-rouge">then</code>, <code class="language-plaintext highlighter-rouge">catch</code>, and <code class="language-plaintext highlighter-rouge">finally</code> methods, whcih are called on the value returned from the promise constructor</li>
  <li><code class="language-plaintext highlighter-rouge">then()</code>
    <ul>
      <li>has two parameters
        <ul>
          <li>the first is a function to invoke when the promise is resolved
            <ul>
              <li>this inner function takes a single parameter, which is result of the promise (commonly named <code class="language-plaintext highlighter-rouge">result</code>)</li>
            </ul>
          </li>
          <li>the second is a function to invoke when the promise is rejected
            <ul>
              <li>this inner function takes a single parameter, which is the error that occurred (commonly named <code class="language-plaintext highlighter-rouge">error</code>)</li>
            </ul>
          </li>
          <li>the second parameter is optoinal and is oftentimes omitted in favor of using <code class="language-plaintext highlighter-rouge">catch</code> methods to more clearly denote the error handlers for a promise</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">catch()</code>
    <ul>
      <li>has a single parameter, which is a function to invoke when the promise is rejected
        <ul>
          <li>this inner function takes a single parameter (the error that occurred, oftentimes named <code class="language-plaintext highlighter-rouge">error</code>)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">finally()</code>
    <ul>
      <li>has a single parameter, which is a function that executes when the promise is settled, whether it’s been resolved or rejected
        <ul>
          <li>this inner function doesn’t take any arguments</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>as a best practice, any asynchronous action in JavaScript should return a promise
    <ul>
      <li>oftentimes, we won’t construct the promise ourselves</li>
      <li>rather, we’ll be writing the code that consumes the promise</li>
      <li>e.g. a callout to a server or other external API will return a promise, which we’ll then handle in our code with <code class="language-plaintext highlighter-rouge">then()</code>, <code class="language-plaintext highlighter-rouge">catch()</code>, and <code class="language-plaintext highlighter-rouge">finally()</code></li>
    </ul>
  </li>
</ul>

<h2 id="the-fetch-api">The Fetch API</h2>

<ul>
  <li>the fetch API is a JavaScript API available in browsers to easily make callouts to external services</li>
  <li>we make a callout by calling the <code class="language-plaintext highlighter-rouge">fetch()</code> method</li>
  <li><code class="language-plaintext highlighter-rouge">fetch()</code> takes two parameters
    <ul>
      <li>the first parameter is the url to send the request to</li>
      <li>the second parameter is an object that can include the HTTP method we want our call to use and the headers and body for our request</li>
      <li>the second parameter is optional - if we exclude it <code class="language-plaintext highlighter-rouge">fetch()</code> will make a GET request (which retrieves data from the specified url)to the provided url</li>
      <li><code class="language-plaintext highlighter-rouge">fetch()</code> returns a promise</li>
    </ul>
  </li>
  <li>when the promise returned by the <code class="language-plaintext highlighter-rouge">fetch()</code> method resolves, it’ll return an object of the Response class, which includes the following property</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Response Property</th>
      <th>Holds</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>status</td>
      <td>HTTP status code associated with the response to our request.</td>
    </tr>
    <tr>
      <td>ok</td>
      <td>true if the status code is successful (i.e. the status code is in the 200s)</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>we can use the methods of the Response class to retrieve the actual response</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Response Methods</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>text()</td>
      <td>Reads the response and returns it as text through a promise.</td>
    </tr>
    <tr>
      <td>json()</td>
      <td>Parses the response as JSON and returns it through a promise.</td>
    </tr>
    <tr>
      <td>formData()</td>
      <td>Returns the response as a FromData object through a promise.</td>
    </tr>
    <tr>
      <td>blob()</td>
      <td>Returns the response Blob through a promise.</td>
    </tr>
    <tr>
      <td>arrayBuffer()</td>
      <td>Returns the response as an ArrayBuffer through a promise.</td>
    </tr>
  </tbody>
</table>

<h2 id="asyncawait-keywords">Async/Await Keywords</h2>

<ul>
  <li>the <code class="language-plaintext highlighter-rouge">async</code> and <code class="language-plaintext highlighter-rouge">await</code> keywords are another way to handle promises in JavaScript
    <ul>
      <li>they’re an abstraction that makes for a more readable way to work with promises</li>
    </ul>
  </li>
  <li>we can declare functions with the <code class="language-plaintext highlighter-rouge">async</code> keyword (which is placed before the <code class="language-plaintext highlighter-rouge">function</code> keyword in the function declaration)
    <ul>
      <li>a function declared with <code class="language-plaintext highlighter-rouge">async</code> always returns a promise</li>
      <li>any return statements in an <code class="language-plaintext highlighter-rouge">async</code> function that don’t explicitly return a promise will have their values wrapped in a resolved promise</li>
    </ul>
  </li>
  <li>the <code class="language-plaintext highlighter-rouge">await</code> keyword can be used in an <code class="language-plaintext highlighter-rouge">async</code> function to suspend funtion execution at the code line that contains it until a promise settles and returns a result
    <ul>
      <li>when JavaScript engine suspends function execution, it doesn’t wait for the promise to resolve synchronously</li>
      <li>rather, it places the <code class="language-plaintext highlighter-rouge">async</code> function in the microtask queue and continue executing other tasks</li>
      <li>when the promise is settled, the engine will grab the suspended function from the microtask queue and finish execution</li>
    </ul>
  </li>
  <li>e.g.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">executeAsyncOperation</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">asyncOperationResult</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">asyncOperation</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>to implement error handling, we can wrap the <code class="language-plaintext highlighter-rouge">await</code> statement inside of a <code class="language-plaintext highlighter-rouge">try</code> <code class="language-plaintext highlighter-rouge">catch</code> block</li>
</ul>

<h3 id="try-catch-blocks">Try-Catch Blocks</h3>

<ul>
  <li>we can wrap code that may throw an exception in the <code class="language-plaintext highlighter-rouge">try</code> block</li>
  <li>following the <code class="language-plaintext highlighter-rouge">try</code> block, we can use a <code class="language-plaintext highlighter-rouge">catch</code> block to handle the exception</li>
  <li>we can optionally include a <code class="language-plaintext highlighter-rouge">finally</code> block that will run regardless of whether an exception was thrown</li>
  <li>e.g.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
    <span class="c1">// code that might throw an exception</span>
<span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// handle exception</span>
<span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>we don’t declare multiple <code class="language-plaintext highlighter-rouge">catch</code> blocks for a single <code class="language-plaintext highlighter-rouge">try</code> block because all exceptions are caught by the first <code class="language-plaintext highlighter-rouge">catch</code> block since we don’t specify types for our parameters</li>
  <li>the code in the <code class="language-plaintext highlighter-rouge">finally</code> block will execute if an exception is thrown so long as the thrown exception is handled in a previous <code class="language-plaintext highlighter-rouge">catch</code> block or somewhere in the calling code</li>
</ul>

<h2 id="json">JSON</h2>

<ul>
  <li>JavaScript Object Notation</li>
  <li>used both in and outside of JavaScript</li>
  <li>a data format that’s commonly used to pass information between different web applications or services</li>
  <li>the values for keys in JSON cannot be functions, symbols, or undefined values</li>
  <li><code class="language-plaintext highlighter-rouge">JSON.stringify()</code>
    <ul>
      <li>takes an object as an argument and converts to a JSON string (i.e. a JSON-encoded object/serialized object)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">JSON.parse()</code>
    <ul>
      <li>takes a JSON string as an argument and converting it to a JavaScript object</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[Asynchronous JavaScript]]></summary></entry><entry><title type="html">Code snippets</title><link href="http://localhost:4000/javascript/2022/07/29/Code-Snipets.html" rel="alternate" type="text/html" title="Code snippets" /><published>2022-07-29T00:00:00-07:00</published><updated>2022-07-29T00:00:00-07:00</updated><id>http://localhost:4000/javascript/2022/07/29/Code-Snipets</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/29/Code-Snipets.html"><![CDATA[<h1 id="getelementbyid">GetElementById</h1>

<p><img src="/getElementById.png" alt="getElement" /></p>]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[GetElementById]]></summary></entry><entry><title type="html">Recap</title><link href="http://localhost:4000/general/2022/07/29/html-JS-Recap.html" rel="alternate" type="text/html" title="Recap" /><published>2022-07-29T00:00:00-07:00</published><updated>2022-07-29T00:00:00-07:00</updated><id>http://localhost:4000/general/2022/07/29/html-JS-Recap</id><content type="html" xml:base="http://localhost:4000/general/2022/07/29/html-JS-Recap.html"><![CDATA[<p>###</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;a&gt;  </code> -  Renders clickable hyperlink</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ol&gt; </code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;ul&gt; </code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;li&gt; </code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;h1&gt; </code> - Through <code class="language-plaintext highlighter-rouge">&lt;h6&gt;</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> - Renders pictures</li>
</ul>

<h3 id="forms">Forms</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;input&gt;</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">type</code></li>
      <li><code class="language-plaintext highlighter-rouge">label</code></li>
      <li><code class="language-plaintext highlighter-rouge">id</code></li>
      <li><code class="language-plaintext highlighter-rouge">submit</code></li>
      <li><code class="language-plaintext highlighter-rouge">reset</code> clears the form data</li>
    </ul>
  </li>
</ul>

<h3 id="css">CSS</h3>

<ul>
  <li>Rulesets / rules
    <ul>
      <li>collections that specify elements to style and the styling to apply</li>
    </ul>
  </li>
  <li>Declarations
    <ul>
      <li>property value pairs specifying the styling</li>
    </ul>
  </li>
  <li>Selectors
    <ul>
      <li>determine which elements to apply the styling to</li>
    </ul>
  </li>
  <li>Properties
    <ul>
      <li>kind of styling we are applying</li>
    </ul>
  </li>
  <li>
    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span><span class="p">{</span>
<span class="nl">background-color</span><span class="p">:</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <h3 id="selectors">Selectors</h3>
  </li>
  <li>id
    <ul>
      <li>prefix by #</li>
    </ul>
  </li>
  <li>class
    <ul>
      <li>prefix by period</li>
      <li>
        <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">.nameofclass</span><span class="p">{</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>tag
    <ul>
      <li>write the name of the tag itself</li>
    </ul>
  </li>
  <li>other attributes</li>
  <li></li>
  <li>combining multiple selectors</li>
  <li>```css
p.nameofclass {</li>
</ul>

<p>}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### where to include css

- inline
- externally
- 

### specificity
- Ruleset with the most specific selector takes precedence
- if one selects by `id` the other does not, the one with `id` takes precedence
- if there is a tie then we compare the n
- 
- 
### Box Model
- has four layers margin, border, padding, and content
- 
### sizing in hte css styles
- specify size in two ways:
    - absolutes
        - takes the same space of the window -  px cm in
    - relative
        - adapts to the size of the window in use % or em
### responsive
- implement styling
    - relative sizing in css declarations 

### Javascript
    
- loosely -typed
    - variables can be declared at run time
- dynamic
    - types 
- seven primitives
    - String
    - Number
    - BigInt
    - Null
    - Undefined
    - Symbol
    - boolean
- declarations    
    - var
        - older way prior to es6, 
        - global
            - outside function
        -  or function
            - inside function
    - const
        - for constants
        - enforces block scope
        - immutable
    - let
    - 
    - Hoisting
        - you can use var variables before assignment
        - 
    - Type coercion
        - implicit conversion of a type to another
        - 
### Control flow
- conditionals
    - if 
    - else
    - if else
- Ternary operator
    - short hand for ef else
    - `a = condition ? 'condition is true' : 'condition is false'; `

    - for of loop
        ```javascript
        for(let iterableVariable of iterableObject){
    
}
        ```
    - for in loop
    ```javascript
    for(let iterableVariable in Object){
}
    ```


### Arrays
- zero indexed
- use of square brackets
- ```javascript
let myArray = [1,2,3];

</code></pre></div></div>
<ul>
  <li>dynamically sized in js</li>
  <li>.length</li>
  <li>initialize objects through object literals</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstKey</span><span class="p">:</span> <span class="dl">'</span><span class="s1">first Value</span><span class="dl">'</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>refer to value using the dot notation <code class="language-plaintext highlighter-rouge">.</code> , or the square brackets</li>
  <li></li>
  <li>
    <h3 id="falsey-values">Falsey Values</h3>
  </li>
  <li>null</li>
  <li>undefined</li>
  <li>0</li>
  <li>empty string</li>
  <li>NaN</li>
  <li>false
they evaluate to falsein control flow</li>
</ul>

<h3 id="functions">functions</h3>
<ul>
  <li>
    <h3 id="immediately-invoked-functions">immediately invoked functions</h3>
    <p>```javascript
(function)(){}();</p>
  </li>
</ul>

<p>(()=&gt;);</p>

<p>(()={
})();
```</p>
<h3 id="dom">DOM</h3>
<ul>
  <li>Selector methods</li>
  <li>getElementById()</li>
  <li>getElementByTagName()</li>
  <li>getElementByClassName()</li>
  <li>querySelector()
    <ul>
      <li>uses css syntax</li>
    </ul>
  </li>
  <li>querySelectorAll()</li>
  <li>
    <h3 id="event">Event</h3>
  </li>
  <li>event listeners
    <ul>
      <li>attach to elements in the js code by using addEventListener(event, handler, useCapture)</li>
      <li>event- event</li>
      <li>handler - function to invoke</li>
      <li>useCapture - determines if even fires in bubbling or capturing phases</li>
      <li>to remove eventListener
        <h3 id="event-propagation">Event Propagation</h3>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="General" /><summary type="html"><![CDATA[### &lt;a&gt; - Renders clickable hyperlink &lt;ol&gt; &lt;ul&gt; &lt;li&gt; &lt;h1&gt; - Through &lt;h6&gt; &lt;img&gt; - Renders pictures]]></summary></entry><entry><title type="html">Operator Precedence</title><link href="http://localhost:4000/javascript/2022/07/28/JavaScript-Operators.html" rel="alternate" type="text/html" title="Operator Precedence" /><published>2022-07-28T18:06:00-07:00</published><updated>2022-07-28T18:06:00-07:00</updated><id>http://localhost:4000/javascript/2022/07/28/JavaScript-Operators</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/28/JavaScript-Operators.html"><![CDATA[<ul>
  <li>Operators are special functions</li>
  <li>infix means the operator sits in between the parameters</li>
</ul>

<table class="fullwidth-table">
  <tbody>
    <tr>
      <th>Precedence</th>
      <th>Operator type</th>
      <th>Associativity</th>
      <th>Individual operators</th>
    </tr>
    <tr>
      <td>18 Highest</td>
      <td>
        
      </td>
      <td>n/a</td>
      <td><code>( … )</code></td>
    </tr>
    <tr>
      <td rowspan="5">17</td>
      <td>
        
      </td>
      <td>left-to-right</td>
      <td><code>… . …</code></td>
    </tr>
    <tr>
      <td>
        
      </td>
      <td>n/a</td>
      <td><code>… [ … ]</code></td>
    </tr>
    <tr>
      <td> (with argument list)</td>
      <td>n/a</td>
      <td><code>new … ( … )</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Guide/Functions">Function Call</a>
      </td>
      <td>n/a</td>
      <td>
        <code>… ( … )</code>
      </td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Optional chaining</a>
      </td>
      <td>left-to-right</td>
      <td><code>?.</code></td>
    </tr>
    <tr>
      <td>16</td>
      <td>
         (without argument list)
      </td>
      <td>n/a</td>
      <td><code>new …</code></td>
    </tr>
    <tr>
      <td rowspan="2">15</td>
      <td>
        
      </td>
      <td rowspan="2">n/a</td>
      <td><code>… ++</code></td>
    </tr>
    <tr>
      <td>
        
      </td>
      <td><code>… --</code></td>
    </tr>
    <tr>
      <td rowspan="10">14</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT">Logical NOT (!)</a>
      </td>
      <td rowspan="10">n/a</td>
      <td><code>! …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT">Bitwise NOT (~)</a>
      </td>
      <td><code>~ …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus">Unary plus (+)</a>
      </td>
      <td><code>+ …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation">Unary negation (-)</a>
      </td>
      <td><code>- …</code></td>
    </tr>
    <tr>
      <td>
        
      </td>
      <td><code>++ …</code></td>
    </tr>
    <tr>
      <td>
        
      </td>
      <td><code>-- …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>typeof …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>void …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>delete …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>await …</code></td>
    </tr>
    <tr>
      <td>13</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation">Exponentiation (**)</a>
      </td>
      <td>right-to-left</td>
      <td><code>… ** …</code></td>
    </tr>
    <tr>
      <td rowspan="3">12</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication">Multiplication (*)</a>
      </td>
      <td rowspan="3">left-to-right</td>
      <td><code>… * …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Division">Division (/)</a>
      </td>
      <td><code>… / …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Remainder">Remainder (%)</a>
      </td>
      <td><code>… % …</code></td>
    </tr>
    <tr>
      <td rowspan="2">11</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Addition">Addition (+)</a>
      </td>
      <td rowspan="2">left-to-right</td>
      <td><code>… + …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction">Subtraction (-)</a>
      </td>
      <td><code>… - …</code></td>
    </tr>
    <tr>
      <td rowspan="3">10</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift">Bitwise Left Shift (&#x3C;&#x3C;)</a>
      </td>
      <td rowspan="3">left-to-right</td>
      <td><code>… &#x3C;&#x3C; …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift">Bitwise Right Shift (&gt;&gt;)</a>
      </td>
      <td><code>… &gt;&gt; …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift">Bitwise Unsigned Right Shift (&gt;&gt;&gt;)</a>
      </td>
      <td><code>… &gt;&gt;&gt; …</code></td>
    </tr>
    <tr>
      <td rowspan="6">9</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Less_than">Less Than (&#x3C;)</a>
      </td>
      <td rowspan="6">left-to-right</td>
      <td><code>… &#x3C; …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal">Less Than Or Equal (&#x3C;=)</a>
      </td>
      <td><code>… &#x3C;= …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than">Greater Than (&gt;)</a>
      </td>
      <td><code>… &gt; …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal">Greater Than Or Equal (&gt;=)</a>
      </td>
      <td><code>… &gt;= …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>… in …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>… instanceof …</code></td>
    </tr>
    <tr>
      <td rowspan="4">8</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Equality">Equality (==)</a>
      </td>
      <td rowspan="4">left-to-right</td>
      <td><code>… == …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Inequality">Inequality (!=)</a>
      </td>
      <td><code>… != …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality">Strict Equality (===)</a>
      </td>
      <td><code>… === …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality">Strict Inequality (!==)</a>
      </td>
      <td><code>… !== …</code></td>
    </tr>
    <tr>
      <td>7</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND">Bitwise AND (&#x26;)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… &#x26; …</code></td>
    </tr>
    <tr>
      <td>6</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR">Bitwise XOR (^)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… ^ …</code></td>
    </tr>
    <tr>
      <td>5</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR">Bitwise OR (|)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… | …</code></td>
    </tr>
    <tr>
      <td>4</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND">Logical AND (&#x26;&#x26;)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… &#x26;&#x26; …</code></td>
    </tr>
    <tr>
      <td rowspan="2">3</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">Logical OR (||)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… || …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">Nullish coalescing operator (??)</a>
      </td>
      <td>left-to-right</td>
      <td><code>… ?? …</code></td>
    </tr>
    <tr>
      <td rowspan="21">2</td>
      <td rowspan="16">
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators">Assignment</a>
      </td>
      <td rowspan="16">right-to-left</td>
      <td><code>… = …</code></td>
    </tr>
    <tr>
      <td><code>… += …</code></td>
    </tr>
    <tr>
      <td><code>… -= …</code></td>
    </tr>
    <tr>
      <td><code>… **= …</code></td>
    </tr>
    <tr>
      <td><code>… *= …</code></td>
    </tr>
    <tr>
      <td><code>… /= …</code></td>
    </tr>
    <tr>
      <td><code>… %= …</code></td>
    </tr>
    <tr>
      <td><code>… &#x3C;&#x3C;= …</code></td>
    </tr>
    <tr>
      <td><code>… &gt;&gt;= …</code></td>
    </tr>
    <tr>
      <td><code>… &gt;&gt;&gt;= …</code></td>
    </tr>
    <tr>
      <td><code>… &#x26;= …</code></td>
    </tr>
    <tr>
      <td><code>… ^= …</code></td>
    </tr>
    <tr>
      <td><code>… |= …</code></td>
    </tr>
    <tr>
      <td><code>… &#x26;&#x26;= …</code></td>
    </tr>
    <tr>
      <td><code>… ||= …</code></td>
    </tr>
    <tr>
      <td><code>… ??= …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">Conditional (ternary) operator</a>
      </td>
      <td>right-to-left<br />(Groups on expressions after <code>?</code>)</td>
      <td><code>… ? … : …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow (=&gt;)</a>
      </td>
      <td rowspan="4">n/a</td>
      <td><code>… =&gt; …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>yield …</code></td>
    </tr>
    <tr>
      <td></td>
      <td><code>yield* …</code></td>
    </tr>
    <tr>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread (...)</a>
      </td>
      <td><code>... …</code></td>
    </tr>
    <tr>
      <td>1</td>
      <td>
        <a href="/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator">Comma / Sequence</a>
      </td>
      <td>left-to-right</td>
      <td><code>… , …</code></td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[Operators are special functions infix means the operator sits in between the parameters]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/07/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-07-28T16:30:13-07:00</published><updated>2022-07-28T16:30:13-07:00</updated><id>http://localhost:4000/jekyll/update/2022/07/28/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/07/28/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Intro</title><link href="http://localhost:4000/javascript/2022/07/28/Javascript-Intro.html" rel="alternate" type="text/html" title="Intro" /><published>2022-07-28T16:30:13-07:00</published><updated>2022-07-28T16:30:13-07:00</updated><id>http://localhost:4000/javascript/2022/07/28/Javascript-Intro</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/28/Javascript-Intro.html"><![CDATA[<h3 id="intro">Intro</h3>
<ul>
  <li>Javascript is an interpret language that web browsers can parse and execute.</li>
  <li>It is  single threaded ; meaning that JavaScript engines will run and execute code one process at a time.</li>
  <li>It is multi-paradigm ; meaning that it can be
    <ul>
      <li>functional</li>
      <li>object oriented</li>
      <li>or procedural</li>
    </ul>
  </li>
  <li>It is loosely typed and dynamically typed:
    <ul>
      <li>No need to declare type when declaring the variables</li>
      <li>The variable types are declared at runtime.</li>
    </ul>
  </li>
</ul>

<h3 id="data-types">Data Types</h3>

<ul>
  <li>Number</li>
  <li>String</li>
  <li>Boolean</li>
  <li>Undefined</li>
  <li>Symbol</li>
  <li>Null</li>
  <li>BigInt</li>
  <li>Primitive type represents a  unit value</li>
</ul>

<h3 id="variable-declarations">Variable Declarations</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code> - hoisted</li>
  <li><code class="language-plaintext highlighter-rouge">let</code> - not hoisted</li>
  <li><code class="language-plaintext highlighter-rouge">const</code> - not hoisted</li>
  <li>
    <h3 id="hoisting">Hoisting</h3>
  </li>
</ul>

<h3 id="type-coercion">Type Coercion</h3>

<ul>
  <li>Implicit conversion of the variable from one data type to another</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>Value</td>
      <td>Becomes…</td>
    </tr>
    <tr>
      <td><strong>__</strong></td>
      <td><strong>__</strong>_____</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Undefined</code></td>
      <td><code class="language-plaintext highlighter-rouge">Nan</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">null</code></td>
      <td>0</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">true</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">false</code></td>
      <td>0</td>
    </tr>
    <tr>
      <td>String</td>
      <td>white space from the start and end of the string are removed. string with empty values are converted to 0. If possible, a string will be converted to number, else it will be converted to <code class="language-plaintext highlighter-rouge">NaN</code></td>
    </tr>
  </tbody>
</table>

<ul>
  <li>If one of the values is a String and the operator is <code class="language-plaintext highlighter-rouge">+</code>, the other value will be converted to a string as well.</li>
  <li>Using <code class="language-plaintext highlighter-rouge">==</code> to compare two entities? Javascript will try tio convert both to numbers.</li>
  <li>To check equality without type coercion, use the <code class="language-plaintext highlighter-rouge">===</code></li>
  <li>In the case of two libraries with the same names that are being imported, check if there is aready a library with the names and if not load the one of your choice</li>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">libraryName</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">libraryName</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">lib2</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[Intro Javascript is an interpret language that web browsers can parse and execute. It is single threaded ; meaning that JavaScript engines will run and execute code one process at a time. It is multi-paradigm ; meaning that it can be functional object oriented or procedural It is loosely typed and dynamically typed: No need to declare type when declaring the variables The variable types are declared at runtime.]]></summary></entry><entry><title type="html">Asynchronous</title><link href="http://localhost:4000/javascript/2022/07/28/Asynchronous.html" rel="alternate" type="text/html" title="Asynchronous" /><published>2022-07-28T00:00:00-07:00</published><updated>2022-07-28T00:00:00-07:00</updated><id>http://localhost:4000/javascript/2022/07/28/Asynchronous</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/28/Asynchronous.html"><![CDATA[<h3 id="asynchronous">Asynchronous</h3>
<p>what is asynchronous in javascript?</p>
<ul>
  <li>In javascript there is the execution stack and the event cue, as soon as the execution task is empty, the event queue is entered</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">waitFourSecs</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">ms</span> <span class="o">=</span> <span class="mi">4000</span> <span class="o">+</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
    <span class="k">while</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">ms</span> <span class="p">){}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">finished function</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">clickHandler</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">click event!</span><span class="dl">'</span><span class="p">);</span>

<span class="p">}</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span><span class="nx">clickHandler</span><span class="p">);</span>

<span class="nx">waitFourSecs</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">finished execution</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>The click even above will be executed last</li>
</ul>]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[Asynchronous what is asynchronous in javascript? In javascript there is the execution stack and the event cue, as soon as the execution task is empty, the event queue is entered]]></summary></entry><entry><title type="html">Control Flow</title><link href="http://localhost:4000/javascript/2022/07/28/Control-Flow.html" rel="alternate" type="text/html" title="Control Flow" /><published>2022-07-28T00:00:00-07:00</published><updated>2022-07-28T00:00:00-07:00</updated><id>http://localhost:4000/javascript/2022/07/28/Control-Flow</id><content type="html" xml:base="http://localhost:4000/javascript/2022/07/28/Control-Flow.html"><![CDATA[]]></content><author><name></name></author><category term="JavaScript" /><summary type="html"><![CDATA[]]></summary></entry></feed>