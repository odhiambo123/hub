---
layout: post
title: "HTML"
date: 2022-07-30
categories: [blog/HTML/]
---

You're about to dive into the foundational language of the web\! HTML (HyperText Markup Language) is the backbone of every webpage you've ever visited. It provides the structure and content, telling the browser what elements are on the page.

This tutorial will be comprehensive, covering everything from the absolute basics to more advanced (but still fundamental) concepts.

-----

## The Complete Beginner's Guide to HTML

### What You'll Learn:

1.  **What is HTML?**
2.  **HTML Document Structure**
      * `<!DOCTYPE html>`
      * `<html>`
      * `<head>`
      * `<body>`
3.  **Elements, Tags, and Attributes**
      * Opening and Closing Tags
      * Self-Closing Tags
      * Attributes (name-value pairs)
4.  **Basic HTML Elements**
      * Headings (`<h1>` to `<h6>`)
      * Paragraphs (`<p>`)
      * Links (`<a>`)
      * Images (`<img>`)
      * Lists (`<ul>`, `<ol>`, `<li>`)
      * Line Breaks (`<br>`) and Horizontal Rules (`<hr>`)
      * Bold (`<strong>`, `<b>`) and Italic (`<em>`, `<i>`) Text
5.  **Semantic HTML**
      * Why use it?
      * `header`, `nav`, `main`, `section`, `article`, `aside`, `footer`
6.  **Tables (`<table>`)**
      * `<thead>`, `<tbody>`, `<tfoot>`
      * `<tr>`, `<th>`, `<td>`
      * `colspan`, `rowspan`
7.  **Forms (`<form>`)**
      * `<input>` (various types: text, password, submit, checkbox, radio, email, number)
      * `<textarea>`
      * `<select>`, `<option>`
      * `<button>`
      * `label`, `fieldset`, `legend`
8.  **Embedding Media**
      * Audio (`<audio>`)
      * Video (`<video>`)
      * Iframes (`<iframe>`)
9.  **HTML Entities**
10. **Comments**
11. **HTML Validation & Best Practices**

-----

### 1\. What is HTML?

HTML stands for **HyperText Markup Language**.

  * **HyperText:** Text that contains links to other text.
  * **Markup Language:** A computer language that uses tags to define elements within a document. It tells the browser how to structure the content on a web page.

HTML is **not** a programming language; it doesn't have logic or algorithms. It's a *markup* language used to describe the *structure* of content.

### 2\. HTML Document Structure

Every HTML page follows a basic structure. Let's create our first HTML file:

1.  Create a folder named `html_tutorial`.
2.  Inside it, create a file named `index.html`.
3.  Open `index.html` in your text editor and add the following:

**`index.html`:**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My First HTML Page</title>
</head>
<body>

    <h1>Hello, HTML!</h1>
    <p>This is my first paragraph on this web page.</p>

</body>
</html>
```

**Explanation of the structure:**

  * `<!DOCTYPE html>`: This declaration defines that this document is an HTML5 document. It's crucial for browsers to render the page correctly.
  * `<html lang="en">...</html>`: This is the root element of an HTML page. All other elements are nested inside it. The `lang="en"` attribute specifies the language of the document, which is good for accessibility and search engines.
  * `<head>...</head>`: Contains meta-information about the HTML document. **Content inside `<head>` is NOT displayed directly on the webpage itself.**
      * `<meta charset="UTF-8">`: Specifies the character encoding for the document, ensuring proper display of various characters.
      * `<meta name="viewport" content="width=device-width, initial-scale=1.0">`: Essential for responsive web design, instructing the browser how to control the page's dimensions and scaling on different devices.
      * `<title>My First HTML Page</title>`: Sets the title that appears in the browser tab or window title bar.
  * `<body>...</body>`: Contains all the visible content of the webpage. Everything you see on a web page (text, images, links, etc.) lives inside the `<body>` tags.

**To see it:** Save `index.html` and simply double-click the file in your file explorer. It will open in your default web browser, displaying "Hello, HTML\!" and the paragraph.

### 3\. Elements, Tags, and Attributes

Understanding these terms is fundamental:

  * **HTML Element:** Everything from the start tag to the end tag, including the content in between. For example, `<p>This is a paragraph.</p>` is a paragraph element.

  * **HTML Tag:** The keywords surrounded by angle brackets (`<p>`, `</p>`, `<img>`).

      * **Opening Tag (Start Tag):** `<p>`
      * **Closing Tag (End Tag):** `</p>` (Note the forward slash `/`)
      * **Content:** The information between the opening and closing tags.

  * **Self-Closing (Empty) Tags:** Some elements don't have content and don't need a closing tag. They contain only attributes. Examples include `<img>`, `<br>`, `<hr>`, `<meta>`, `<link>`, `<input>`.

      * `<img src="image.jpg" alt="Description">`

  * **Attributes:** Provide additional information about HTML elements. They are always specified in the start tag and come in `name="value"` pairs.

    ```html
    <a href="https://www.example.com" target="_blank">Visit Example</a>
    ```

      * `href`: The attribute name, specifying the URL for the link.
      * `target`: The attribute name, specifying where to open the linked document.
      * `"_blank"`: The value for the `target` attribute, meaning "open in a new tab/window."

### 4\. Basic HTML Elements

Let's expand our `index.html` with common elements.

**`index.html` (Expanded):**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic HTML Elements</title>
</head>
<body>

    <h1>This is a Main Heading (h1)</h1>
    <h2>This is a Sub-heading (h2)</h2>
    <h3>This is a smaller heading (h3)</h3>
    <h4>And so on, down to h6</h4>

    <p>This is a regular paragraph. HTML uses paragraphs to structure blocks of text. You can add as much text as you want here.</p>

    <p>This paragraph contains a <a href="https://www.google.com" target="_blank">link to Google</a>. The <code>target="_blank"</code> attribute makes it open in a new tab.</p>

    <p>Here's an image:</p>
    <img src="https://via.placeholder.com/300x200?text=My+Image" alt="A placeholder image with text 'My Image'" width="300" height="200">
    <p>*(The `src` attribute specifies the image source, `alt` provides alternative text for screen readers, and `width`/`height` set dimensions.)*</p>

    <h2>Lists</h2>
    <h3>Unordered List (Bullet Points)</h3>
    <ul>
        <li>Item One</li>
        <li>Item Two
            <ul>
                <li>Nested Item A</li>
                <li>Nested Item B</li>
            </ul>
        </li>
        <li>Item Three</li>
    </ul>

    <h3>Ordered List (Numbered Points)</h3>
    <ol>
        <li>First Step</li>
        <li>Second Step</li>
        <li>Third Step</li>
    </ol>

    <p>This line is normal.<br>This line starts on a new line because of a line break (`<br>`).</p>
    <hr> <p>Above this is a horizontal rule (`<hr>`).</p>

    <p>This text is <strong>important</strong> using `<strong>` for semantic meaning.</p>
    <p>This text is <b>bold</b> using `<b>` for presentation only (less semantic).</p>
    <p>This text is <em>emphasized</em> using `<em>` for semantic meaning.</p>
    <p>This text is <i>italic</i> using `<i>` for presentation only (less semantic).</p>

</body>
</html>
```

**To see it:** Save and refresh `index.html` in your browser.

### 5\. Semantic HTML

Semantic HTML means using HTML elements for their intended meaning, not just for how they look by default. This is crucial for:

  * **Accessibility:** Screen readers rely on semantic tags to convey meaning to visually impaired users.
  * **SEO (Search Engine Optimization):** Search engines better understand the content and hierarchy of your page.
  * **Maintainability:** Your code is easier for you and others to understand.

Here are key semantic elements often used with **CSS** for styling:

  * `<header>`: Introduces content, often containing navigation, logos, and headings.
  * `<nav>`: Contains navigation links.
  * `<main>`: Represents the dominant content of the `<body>`. There should only be one `<main>` per document.
  * `<section>`: A thematic grouping of content, typically with a heading.
  * `<article>`: Independent, self-contained content (like a blog post, news story, forum post).
  * `<aside>`: Content indirectly related to the main content (e.g., sidebars, pull quotes).
  * `<footer>`: Contains authorship information, copyright data, related documents, etc.

**`index.html` (with Semantic Tags):**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Semantic HTML Example</title>
</head>
<body>

    <header>
        <h1>My Awesome Blog</h1>
        <nav>
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="home">
            <h2>Latest Posts</h2>
            <article>
                <h3>Post Title One</h3>
                <p>Published: <time datetime="2025-07-21">July 21, 2025</time></p>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                <a href="#">Read more</a>
            </article>
            <article>
                <h3>Post Title Two</h3>
                <p>Published: <time datetime="2025-07-20">July 20, 2025</time></p>
                <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...</p>
                <a href="#">Read more</a>
            </article>
        </section>

        <aside>
            <h3>About Me</h3>
            <p>I'm a web developer passionate about teaching HTML.</p>
        </aside>
    </main>

    <footer>
        <p>&copy; 2025 My Awesome Blog</p>
    </footer>

</body>
</html>
```

**To see it:** Save and refresh `index.html`. Visually, it won't look much different from a page using `div` for everything, but its underlying structure is much more meaningful.

### 6\. Tables (`<table>`)

Tables are used to display tabular data (data that makes sense in rows and columns, like a spreadsheet). **Do not use tables for page layout.**

  * `<table>`: The container for the entire table.
  * `<thead>`: Groups the header content in a table.
  * `<tbody>`: Groups the body content in a table.
  * `<tfoot>`: Groups the footer content in a table.
  * `<tr>`: Table Row.
  * `<th>`: Table Header cell (bold and centered by default).
  * `<td>`: Table Data cell.

**Attributes for cells:**

  * `colspan="N"`: Makes a cell span across N columns.
  * `rowspan="N"`: Makes a cell span across N rows.

**`index.html` (Table Example):**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML Tables</title>
    <style> /* Simple internal CSS for table borders */
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse; /* Makes borders collapse into a single line */
            padding: 8px;
        }
    </style>
</head>
<body>

    <h2>Product Inventory</h2>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>In Stock</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Laptop X</td>
                <td>Electronics</td>
                <td>$1200</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Keyboard Pro</td>
                <td>Accessories</td>
                <td>$90</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Mouse Wireless</td>
                <td>Accessories</td>
                <td>$30</td>
                <td>Yes</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3">Total items in stock:</td>
                <td>2</td>
            </tr>
        </tfoot>
    </table>

    <h3>Complex Table Example</h3>
    <table>
        <tr>
            <th>Header 1</th>
            <th>Header 2</th>
            <th>Header 3</th>
        </tr>
        <tr>
            <td rowspan="2">Row 1, Col 1 (spans 2 rows)</td>
            <td>Row 1, Col 2</td>
            <td>Row 1, Col 3</td>
        </tr>
        <tr>
            <td colspan="2">Row 2, Col 2 (spans 2 columns)</td>
        </tr>
    </table>

</body>
</html>
```

**To see it:** Save and refresh `index.html`.

### 7\. Forms (`<form>`)

Forms are used to collect user input.

  * `<form>`: The container for all form elements.
      * `action`: Specifies where to send the form data when submitted (e.g., a server-side script).
      * `method`: The HTTP method to use (`GET` or `POST`). `GET` appends data to the URL (visible), `POST` sends data in the HTTP body (not visible).
  * `<input>`: The most versatile form element, with many `type` attributes:
      * `type="text"`: Single-line text input.
      * `type="password"`: Password input (characters are masked).
      * `type="submit"`: A button to submit the form.
      * `type="checkbox"`: Allows multiple selections.
      * `type="radio"`: Allows only one selection from a group (use the same `name` attribute for a group).
      * `type="email"`: Input for email addresses (browser validates format).
      * `type="number"`: Input for numbers (with up/down arrows).
      * `type="date"`, `type="color"`, `type="range"`, etc.
      * **Common `input` attributes:** `name` (important for sending data), `value` (default value), `placeholder` (hint text), `required` (makes field mandatory), `readonly`, `disabled`.
  * `<textarea>`: Multi-line text input.
  * `<select>`, `<option>`: Dropdown list.
  * `<button>`: A clickable button (can submit, reset, or just be a generic button).
  * `<label>`: Associates text with a form control. Clicking the label focuses the input.
      * Use `for` attribute on `label` matching `id` on `input`.
  * `<fieldset>`, `<legend>`: Groups related form elements with a caption.

**`index.html` (Form Example):**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML Forms</title>
</head>
<body>

    <h2>Contact Us</h2>
    <form action="/submit-form" method="post">
        <fieldset>
            <legend>Your Details</legend>

            <p>
                <label for="fullName">Full Name:</label><br>
                <input type="text" id="fullName" name="fullName" placeholder="John Doe" required>
            </p>

            <p>
                <label for="userEmail">Email:</label><br>
                <input type="email" id="userEmail" name="userEmail" placeholder="you@example.com" required>
            </p>

            <p>
                <label for="userPassword">Password:</label><br>
                <input type="password" id="userPassword" name="userPassword" minlength="8" required>
            </p>

            <p>
                <label for="message">Your Message:</label><br>
                <textarea id="message" name="message" rows="5" cols="30" placeholder="Enter your message here..."></textarea>
            </p>
        </fieldset>

        <fieldset>
            <legend>Preferences</legend>

            <p>Preferred Contact Method:</p>
            <input type="radio" id="emailContact" name="contactMethod" value="email" checked>
            <label for="emailContact">Email</label><br>
            <input type="radio" id="phoneContact" name="contactMethod" value="phone">
            <label for="phoneContact">Phone</label>

            <p>Subscribe to Newsletter?</p>
            <input type="checkbox" id="newsletter" name="newsletter" value="yes">
            <label for="newsletter">Yes, subscribe me!</label>

            <p>
                <label for="country">Country:</label>
                <select id="country" name="country">
                    <option value="">--Please choose an option--</option>
                    <option value="usa">United States</option>
                    <option value="can">Canada</option>
                    <option value="mex">Mexico</option>
                </select>
            </p>
        </fieldset>

        <p>
            <button type="submit">Submit Form</button>
            <button type="reset">Reset Form</button>
        </p>

    </form>

</body>
</html>
```

**To see it:** Save and refresh `index.html`. Fill out some fields and click "Submit Form" (it will try to navigate to `/submit-form`, which doesn't exist locally, so you'll get an error, but you'll see the form submission attempt).

### 8\. Embedding Media

HTML allows you to embed audio, video, and even other webpages.

  * `<audio>`: Embeds audio content.
      * `src`: Path to audio file.
      * `controls`: Displays default browser controls (play, pause, volume).
      * `autoplay`: Starts playing automatically (use sparingly\!).
      * `loop`: Loops the audio.
      * `muted`: Mutes the audio by default.
  * `<video>`: Embeds video content.
      * `src`: Path to video file.
      * `controls`, `autoplay`, `loop`, `muted`: Similar to audio.
      * `width`, `height`: Sets dimensions.
      * `poster`: Image to display before video loads.
  * `<iframe>`: Embeds another HTML document within the current document.
      * `src`: URL of the page to embed.
      * `width`, `height`: Dimensions of the iframe.
      * `frameborder="0"`: Removes the border (older attribute, better controlled with CSS).

**`index.html` (Media Example):**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTML Media Embedding</title>
</head>
<body>

    <h2>Audio Example</h2>
    <audio controls>
        <source src="audio.mp3" type="audio/mpeg"> <source src="audio.ogg" type="audio/ogg">
        Your browser does not support the audio element.
    </audio>
    <p>If `audio.mp3` or `audio.ogg` were in the same folder, they would play.</p>

    <h2>Video Example</h2>
    <video width="320" height="240" controls poster="https://via.placeholder.com/320x240?text=Video+Placeholder">
        <source src="video.mp4" type="video/mp4"> <source src="video.ogg" type="video/ogg">
        Your browser does not support the video tag.
    </video>
    <p>If `video.mp4` or `video.ogg` were in the same folder, they would play.</p>

    <h2>Embedded Google Maps (iframe)</h2>
    <iframe
        src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2685.2533038318285!2d-122.3482782!3d47.7472295!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x549012431b9d4c7d%3A0x6a0d0a7a0b5b2a0c!2sShoreline%2C%20WA!5e0!3m2!1sen!2sus!4v1678901234567!5m2!1sen!2sus"
        width="600"
        height="450"
        style="border:0;"
        allowfullscreen=""
        loading="lazy"
        referrerpolicy="no-referrer-when-downgrade"
        title="Google Map of Shoreline, WA">
    </iframe>
    <p>This iframe embeds a Google Map. Note that you can embed other websites too, but some sites prevent embedding for security reasons.</p>

</body>
</html>
```

**To see it:** Save and refresh `index.html`. You won't see local audio/video unless you place actual `audio.mp3`/`video.mp4` files in your folder, but the map should appear.

### 9\. HTML Entities

HTML entities are used to display reserved characters in HTML or characters that are not on your keyboard. They start with an ampersand (`&`) and end with a semicolon (`;`).

  * `<` (less than) becomes `&lt;`
  * `>` (greater than) becomes `&gt;`
  * `&` (ampersand) becomes `&amp;`
  * `"` (double quote) becomes `&quot;`
  * `'` (apostrophe/single quote) becomes `&apos;`
  * `     ` (non-breaking space) becomes `&nbsp;` (useful for adding multiple spaces that don't collapse)
  * `©` (copyright symbol) becomes `&copy;`

**Example:**

```html
<p>The code for a paragraph is &lt;p&gt;.</p>
<p>This will display multiple&nbsp;&nbsp;&nbsp;&nbsp;spaces.</p>
<p>&copy; 2025 All Rights Reserved.</p>
```

### 10\. Comments

Comments are used to explain your code, making it more readable. Browsers ignore comments.

```html
<p>This is visible content.</p>
```

### 11\. HTML Validation & Best Practices

  * **Validation:** Use an HTML validator (like the W3C Markup Validation Service: `validator.w3.org`) to check for syntax errors. Clean HTML is easier for browsers to parse and better for SEO and accessibility.
  * **Semantic HTML (Reiterated):** Always strive to use the most semantically appropriate tag for your content.
  * **Lowercase Tags:** Although HTML tags are case-insensitive, using lowercase (`<p>`, `<div>`) is the standard practice.
  * **Proper Indentation:** Indent your nested elements to make the code readable and understand the hierarchy.
  * **Image `alt` attributes:** Always include a descriptive `alt` attribute for images for accessibility.
  * **Favicon:** Add a favicon to your site in the `<head>`: `<link rel="icon" type="image/x-icon" href="/images/favicon.ico">`
  * **Link to CSS externally:** Use `<link rel="stylesheet" href="style.css">` in the `<head>`.
  * **Link to JavaScript at the end of `<body>`:** Place `<script src="script.js"></script>` just before `</body>` to ensure HTML is loaded before JavaScript tries to manipulate it. (Unless using `defer` or `async` attributes, which are more advanced).

-----

You now have a solid understanding of HTML, its core components, and how to structure a webpage. The next step is to combine this with CSS for styling and JavaScript for interactivity to build dynamic and beautiful web experiences\! Keep practicing and building, and you'll master web development in no time.